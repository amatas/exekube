controller:
  name: controller
  image:
    repository: k8s.gcr.io/nginx-ingress-controller
    tag: "0.9.0-beta.15"
    pullPolicy: IfNotPresent

  config: {}
  headers: {}

  hostNetwork: false

  defaultBackendService: ""

  defaultSSLCertificate: ""

  electionID: ingress-controller-leader

  ingressClass: nginx

  podLabels: {}

  publishService:
    enabled: false
    pathOverride: ""

  scope:
    enabled: false

  extraArgs: {}

  extraEnvs: {}

  kind: Deployment

  updateStrategy: {}

  minReadySeconds: 0


  tolerations: []

  nodeSelector: {}

  podAnnotations: {}

  replicaCount: 1

  resources: {}

  autoscaling:
    enabled: false

  customTemplate:
    configMapName: ""
    configMapKey: ""

  service:
    annotations: {}
    clusterIP: ""

    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []

    externalTrafficPolicy: ""

    healthCheckNodePort: 0

    targetPorts:
      http: 80
      https: 443

    type: LoadBalancer

    nodePorts:
      http: ""
      https: ""

  stats:
    enabled: false

    service:
      annotations: {}
      clusterIP: ""

      externalIPs: []

      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 18080
      type: ClusterIP

  lifecycle: {}

revisionHistoryLimit: 10

defaultBackend:

  enabled: true

  name: default-backend
  image:
    repository: k8s.gcr.io/defaultbackend
    tag: "1.3"
    pullPolicy: IfNotPresent

  extraArgs: {}

  tolerations: []

  podLabels: {}

  nodeSelector: {}

  podAnnotations: {}

  replicaCount: 1

  resources: {}

  service:
    annotations: {}
    clusterIP: ""

    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP

rbac:
  create: false
  serviceAccountName: default

statsExporter:
  name: stats-exporter
  image:
    repository: sophos/nginx-vts-exporter
    tag: v0.6
    pullPolicy: IfNotPresent

  endpoint: /metrics
  extraArgs: {}
  metricsNamespace: nginx
  statusPage: http://localhost:18080/nginx_status/format/json

  resources: {}

  service:
    annotations: {}
    clusterIP: ""

    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 9913
    targetPort: 9913
    type: ClusterIP

tcp: {}

udp: {}
